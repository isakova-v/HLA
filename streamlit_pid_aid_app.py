
import re
from typing import List, Dict

import pandas as pd
import streamlit as st
import io

# ----------------------
# Config & helpers
# ----------------------

st.set_page_config(page_title="PID/AID Dashboard", layout="wide")

TEXT_COLS_CANDIDATES = [
    "clinical_discuss", "clinical_comments", "comments_interesting_vars",
    "INTERPRET_VAR_table_user", "INTERPRET_VAR_table",
    "IUIS_classification", "combi_diganosis_mcch52", "clin_manifestations",
    "autoiimunity", "markers"
]

ID_COLS = {
    "uin2_fulltxt": ["uin2_fulltxt", "uin2"],
    "uin2_number": ["uin2_number"],
    "zlims_id": ["zlims_id", "zlims"]
}

SEQ_COLS_CANDIDATES = [
    "status_coverage", "VAR_IEI_panel_table_status", "SANGER"
]

COHORT_COL = "combi_type_mcch52"

# patterns to search (case-insensitive)
PATTERNS: Dict[str, str] = {
    "disregulation": r"–¥–∏—Å—Ä–µ–≥—É–ª",  # –¥–∏—Å—Ä–µ–≥—É–ª—è—Ü–∏
    "cvid_ovin": r"(–æ–≤–∏–Ω|–æ–±—â(–∞—è|–∏–π)\s+–≤–∞—Ä–∏–∞–±–µ–ª\w*\s+–∏–º–º—É–Ω\w*\s+–Ω–µ–¥–æ—Å—Ç–∞—Ç\w*|cvid)",
    "avz_autoinfl": r"(–∞–≤–∑|–∞—É—Ç–æ–≤–æ—Å–ø–∞–ª–µ–Ω–∏\w*|–∞—É—Ç–æ–≤–æ—Å–ø–∞–ª–∏—Ç\w*)",
    "neutropenia": r"–Ω–µ–π—Ç—Ä–æ–ø–µ–Ω\w*",
    "urticaria_skin": r"(–∫—Ä–∞–ø–∏–≤–Ω–∏—Ü\w*|–∫–æ–∂–Ω\w*\s*—Å–∏–Ω–¥—Ä–æ–º\w*)",
    "atopic_derm": r"(–∞—Ç–æ–ø–∏—á–µ—Å–∫\w*.*–¥–µ—Ä–º–∞—Ç–∏—Ç|–∞—Ç–æ–ø–∏—á–µ—Å–∫\w+|–¥–µ—Ä–º–∞—Ç–∏—Ç)",
    "ige_mentioned": r"\bige\b",
    "ige_elevated": r"\bige\b.*(–ø–æ–≤—ã—à|elevat)",
    "asthma": r"–∞—Å—Ç–º\w*",
    "edema_angio": r"(–æ—Ç–µ–∫\w*|–∞–Ω–≥–∏–æ–æ—Ç–µ–∫\w*|–∫–≤–∏–Ω–∫–µ|–Ω–∞–æ|–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω\w*\s*–∞–Ω–≥–∏–æ)",
    "rash": r"–≤—ã—Å—ã–ø–∞\w*",
    "arthritis_joint": r"(–∞—Ä—Ç—Ä–∏—Ç\w*|—Å—É—Å—Ç–∞–≤\w*|–∞—Ä—Ç—Ä–æ–∑\w*)",
    "anemia_thrombocytopenia": r"(–∞–Ω–µ–º–∏\w*|—Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–ø–µ–Ω\w*)",
    "allergy_block": r"(–∞–ª–ª–µ—Ä–≥\w*|—Å–µ–Ω—Å–∏–±–∏–ª–∏–∑\w*|–ø—ã–ª—å—Ü\w*)",
    "sle": r"(–≤–æ–ª—á–∞–Ω\w*|\b—Å–∫–≤\b)",
    "behcet": r"–±–µ—Ö—á–µ—Ç\w*",
    "autoimmune": r"–∞—É—Ç–æ–∏–º–º—É–Ω\w*",
}

def pick_existing(df: pd.DataFrame, candidates: List[str]) -> List[str]:
    low = {c.lower(): c for c in df.columns}
    res = []
    for cand in candidates:
        if cand.lower() in low:
            res.append(low[cand.lower()])
    return res

def first_existing(df: pd.DataFrame, candidates: List[str]) -> str | None:
    cols = pick_existing(df, candidates)
    return cols[0] if cols else None

def concat_text_row(row: pd.Series, text_cols: List[str]) -> str:
    parts = []
    for c in text_cols:
        val = row.get(c, None)
        if pd.notna(val):
            parts.append(str(val))
    return " | ".join(parts).lower()

def has_nonempty(row: pd.Series, cols: List[str]) -> bool:
    for c in cols:
        if c in row and pd.notna(row[c]) and str(row[c]).strip() != "":
            return True
    return False

def mark_patterns(df: pd.DataFrame, text_cols: List[str]) -> pd.DataFrame:
    if not text_cols:
        for key in PATTERNS:
            df[key] = False
        return df
    texts = df[text_cols].astype(str).agg(" | ".join, axis=1).str.lower()
    for key, pat in PATTERNS.items():
        df[key] = texts.str.contains(pat, regex=True, na=False, case=False)
    return df

def compute_completeness(df: pd.DataFrame) -> pd.Series:
    # IDs: require (zlims_id) AND (uin2_number OR uin2_fulltxt)
    id_zlims = first_existing(df, ID_COLS["zlims_id"])
    id_uin_num = first_existing(df, ID_COLS["uin2_number"])
    id_uin_txt = first_existing(df, ID_COLS["uin2_fulltxt"])

    has_zlims = df[id_zlims].notna() & (df[id_zlims].astype(str).str.strip() != "") if id_zlims else False
    has_uin_any = False
    if id_uin_num:
        has_uin_any = df[id_uin_num].notna() & (df[id_uin_num].astype(str).str.strip() != "")
    if id_uin_txt:
        u = df[id_uin_txt].notna() & (df[id_uin_txt].astype(str).str.strip() != "")
        has_uin_any = (has_uin_any | u) if isinstance(has_uin_any, pd.Series) else u

    # Diagnosis info present if any of these non-empty
    diag_cols = pick_existing(df, ["IUIS_classification", "combi_diganosis_mcch52", "clinical_discuss"])
    has_diag = df[diag_cols].astype(str).apply(lambda s: s.str.strip() != "", axis=0).any(axis=1) if diag_cols else False

    # Sequencing info present if any of these non-empty
    seq_cols = pick_existing(df, SEQ_COLS_CANDIDATES)
    has_seq = df[seq_cols].astype(str).apply(lambda s: s.str.strip() != "", axis=0).any(axis=1) if seq_cols else False

    complete = has_zlims & has_uin_any & has_diag & has_seq
    return complete.fillna(False) if isinstance(complete, pd.Series) else pd.Series([False] * len(df))

# ----------------------
# Load data
# ----------------------

st.sidebar.header("–î–∞–Ω–Ω—ã–µ")
uploaded = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) c —Ç–∞–±–ª–∏—Ü–µ–π", type=["xlsx"])
default_path = "PID_AID_phenotypes_13.08.25.xlsx"

if uploaded is not None:
    df = pd.read_excel(uploaded)
elif default_path:
    try:
        df = pd.read_excel(default_path)
        st.sidebar.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: PID_AID_phenotypes_13.08.25.xlsx")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        st.stop()
else:
    st.stop()

st.title("PID/AID ‚Äî –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

# normalize columns (strip)
df.columns = [str(c).strip() for c in df.columns]

# cohort selector
if COHORT_COL in df.columns:
    cohorts = ["(–≤—Å–µ)"] + sorted([str(x) for x in df[COHORT_COL].dropna().unique()])
    picked = st.sidebar.selectbox("–ö–æ–≥–æ—Ä—Ç–∞ (combi_type_mcch52)", cohorts, index=0)
    if picked != "(–≤—Å–µ)":
        df = df[df[COHORT_COL].astype(str) == picked]
else:
    st.sidebar.warning("–ö–æ–ª–æ–Ω–∫–∞ 'combi_type_mcch52' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–æ–≥–æ—Ä—Ç–µ –æ—Ç–∫–ª—é—á—ë–Ω.")

# completeness
complete_mask = compute_completeness(df)
mode = st.sidebar.radio("–ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", ["–í—Å–µ", "–¢–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ (ID + –¥–∏–∞–≥–Ω–æ–∑ + —Å–µ–∫–≤–µ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", "–¢–æ–ª—å–∫–æ –Ω–µ–ø–æ–ª–Ω—ã–µ"], index=0)
if mode != "–í—Å–µ":
    if mode.startswith("–¢–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ"):
        df = df.loc[complete_mask]
    else:
        df = df.loc[~complete_mask]

# build text columns to search
text_cols = pick_existing(df, TEXT_COLS_CANDIDATES)

# mark presence columns
df_marked = df.copy()
df_marked = mark_patterns(df_marked, text_cols)

presence_cols = list(PATTERNS.keys())
binary_table = df_marked[presence_cols].copy().astype(bool)
# attach IDs for reference (best-effort)
id_show_cols = pick_existing(df_marked, ["ID", "uin2_number", "uin2_fulltxt", "zlims_id"])
binary_table = pd.concat([df_marked[id_show_cols], binary_table], axis=1) if id_show_cols else binary_table

# ----------------------
# Tabs
# ----------------------
tab1, = st.tabs(["üß¨ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"])

with tab1:
    st.subheader("–°–≤–æ–¥–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º (–≤ —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–µ)")
    counts = df_marked[presence_cols].sum().sort_values(ascending=False).rename("count").to_frame()
    st.dataframe(counts)

    # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ===
    st.markdown("### –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º")
    # 1) –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Å—É–º–º–∞—Ä–Ω—ã–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
    try:
        st.bar_chart(counts)
    except Exception:
        st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å bar chart –¥–ª—è —Å–≤–æ–¥–∫–∏.")

    # 2) –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –º–µ—Ç–æ–∫ –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏)
    try:
        matches_per_row = df_marked[presence_cols].astype(bool).sum(axis=1)
        st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞**")
        # –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –≤ —á–∞—Å—Ç–æ—Ç—ã
        hist_df = matches_per_row.value_counts().sort_index().rename_axis("num_flags").to_frame("patients")
        st.bar_chart(hist_df)
    except Exception:
        st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º.")

    st.markdown("### –¢–∞–±–ª–∏—Ü–∞ ¬´–µ—Å—Ç—å/–Ω–µ—Ç¬ª –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º")
    st.dataframe(binary_table)

    # === –û—Ç–ª–∞–¥–∫–∞: –ø–∞—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
    st.markdown("### –ü–∞—Ü–∏–µ–Ω—Ç—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤—Å–µ –º–µ—Ç–∫–∏ = False)")
    try:
        no_flags_mask = ~df_marked[presence_cols].any(axis=1)
        df_no_flags = df.loc[no_flags_mask]
        if not df_no_flags.empty:
            st.dataframe(df_no_flags)
            st.caption(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(df_no_flags)} —Å—Ç—Ä–æ–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        else:
            st.info("–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–µ—Ç–∫—É.")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    # === –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü ===
    st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü")
    def to_csv_bytes(df: pd.DataFrame) -> bytes:
        return df.to_csv(index=False).encode("utf-8")

    def to_xlsx_bytes(df: pd.DataFrame) -> bytes:
        bio = io.BytesIO()
        with pd.ExcelWriter(bio, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="data")
        bio.seek(0)
        return bio.read()

    col_a, col_b, col_c, col_d = st.columns(4)
    with col_a:
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å '–µ—Å—Ç—å/–Ω–µ—Ç' (CSV)",
            data=to_csv_bytes(binary_table),
            file_name="binary_table.csv",
            mime="text/csv",
        )
    with col_b:
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å '–µ—Å—Ç—å/–Ω–µ—Ç' (XLSX)",
            data=to_xlsx_bytes(binary_table),
            file_name="binary_table.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    with col_c:
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É (CSV)",
            data=to_csv_bytes(counts.reset_index()),
            file_name="summary_counts.csv",
            mime="text/csv",
        )
    with col_d:
        st.download_button(
            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Å–≤–æ–¥–∫—É (XLSX)",
            data=to_xlsx_bytes(counts.reset_index()),
            file_name="summary_counts.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

    st.markdown("### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π")

    # === –ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º ===
    st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–Ω–æ–∑–∞–º –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–º")
    import matplotlib.pyplot as plt

    def plot_pie(series: pd.Series, title: str):
        vc = series.dropna().astype(str).value_counts()
        if vc.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {title}")
            return
        # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Ç–æ–ø-10, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—É–º–º–∏—Ä—É–µ–º –≤ 'Other'
        top10 = vc.head(10)
        if len(vc) > 10:
            top10.loc["Other"] = vc.iloc[10:].sum()
        fig, ax = plt.subplots()
        ax.pie(top10.values, labels=top10.index, autopct="%1.1f%%", startangle=90, counterclock=False)
        ax.axis("equal")
        ax.set_title(title)
        st.pyplot(fig)

    if "combi_diganosis_mcch52" in df.columns:
        plot_pie(df["combi_diganosis_mcch52"], "combi_diganosis_mcch52")
    else:
        st.warning("–ö–æ–ª–æ–Ω–∫–∞ combi_diganosis_mcch52 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if "IUIS_classification" in df.columns:
        plot_pie(df["IUIS_classification"], "IUIS_classification")
    else:
        st.warning("–ö–æ–ª–æ–Ω–∫–∞ IUIS_classification –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    st.markdown(
        """
- **disregulation** ‚Äî —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∏—Å—Ä–µ–≥—É–ª—è—Ü–∏–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞
- **cvid_ovin** ‚Äî –û–í–ò–ù / CVID
- **avz_autoinfl** ‚Äî –ê–í–ó / –∞—É—Ç–æ–≤–æ—Å–ø–∞–ª–µ–Ω–∏–µ
- **neutropenia** ‚Äî –Ω–µ–π—Ç—Ä–æ–ø–µ–Ω–∏—è
- **urticaria_skin** ‚Äî –∫—Ä–∞–ø–∏–≤–Ω–∏—Ü–∞ / –∫–æ–∂–Ω—ã–π —Å–∏–Ω–¥—Ä–æ–º
- **atopic_derm** ‚Äî –∞—Ç–æ–ø–∏—á–µ—Å–∫–∏–π –¥–µ—Ä–º–∞—Ç–∏—Ç / –∞—Ç–æ–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è / –¥–µ—Ä–º–∞—Ç–∏—Ç
- **ige_mentioned** ‚Äî —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ IgE
- **ige_elevated** ‚Äî —è–≤–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–≤—ã—à–µ–Ω–∏—è IgE
- **asthma** ‚Äî –∞—Å—Ç–º–∞
- **edema_angio** ‚Äî –æ—Ç–µ–∫–∏, –∞–Ω–≥–∏–æ–æ—Ç–µ–∫–∏, –ö–≤–∏–Ω–∫–µ, –ù–ê–û
- **rash** ‚Äî –≤—ã—Å—ã–ø–∞–Ω–∏—è
- **arthritis_joint** ‚Äî –∞—Ä—Ç—Ä–∏—Ç/–∞—Ä—Ç—Ä–æ–∑/—Å—É—Å—Ç–∞–≤–Ω—ã–µ
- **anemia_thrombocytopenia** ‚Äî –∞–Ω–µ–º–∏–∏ –∏ —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–ø–µ–Ω–∏–∏
- **allergy_block** ‚Äî –∞–ª–ª–µ—Ä–≥–∏—è, —Å–µ–Ω—Å–∏–±–∏–ª–∏–∑–∞—Ü–∏—è, —Ä–∏–Ω–∏—Ç, –ø—ã–ª—å—Ü–µ–≤–∞—è
- **sle** ‚Äî –°–ö–í / —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫—Ä–∞—Å–Ω–∞—è –≤–æ–ª—á–∞–Ω–∫–∞
- **behcet** ‚Äî –±–æ–ª–µ–∑–Ω—å –ë–µ—Ö—á–µ—Ç–∞
- **autoimmune** ‚Äî —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ¬´–∞—É—Ç–æ–∏–º–º—É–Ω-¬ª
"""
    )

    st.caption("–ü–æ–¥—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∏–∑ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–ª–æ–Ω–æ–∫. –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º.")
